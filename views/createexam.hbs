<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Exam Management Portal</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #6843ce52;
      margin: 0;
    }

    #formContainer {
      width: 80%;
      max-width: 600px;
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      margin: 20px auto;
      box-sizing: border-box;
    }

    button {
      font-size: 16px;
      padding: 10px;
      margin-bottom: 10px;
      background-color: #6943CE;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      display: block;
      width: 100%;
    }

    button:hover {
      background-color: #6943CE;
    }

    textarea,
    input,
    select,
    .marks-input {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    .selectques {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    #questionsContainer {
      display: flex;
      flex-direction: column;
    }

    .question-container {
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      box-sizing: border-box;
      position: relative;
    }

    .options-container {
      display: flex;
      flex-direction: column;
    }

    .options-container input {
      margin-bottom: 10px;
    }

    .question-number {
      font-weight: bold;
      margin-bottom: 10px;
    }

    .marks-input {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    #submitBtn {
      background-color: #6943CE;
      color: white;
      padding: 10px;
      border: none;
      border-radius: 5px;
      width: 20%;
      cursor: pointer;
      display: none;
    }

    #addQuestionBtn {
      width: 20%;
    }

    #submitBtn:hover {
      background-color: #6943CE;
    }

    .btn {
      display: flex;
      flex-direction: row;
      justify-content: space-around;
      padding: 2px 2px;
    }

    .rmvbtn {
      width: 20%;
      background-color: red;
    }

    .btnopt {
      width: 10%;
      background-color: #6c6b70b7;
      padding: 2px 2px;
    }

    .remove-question-btn {
      position: absolute;
      height: 12%;
      width: 5%;
      top: 14px;
      right: 22px;
      background-color: #f44336;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      padding: 2px 5px;
    }

    .remove-question-btn:hover {
      background-color: rgb(255, 0, 0);
    }
  </style>
</head>

<body>
  <div id="formContainer">
    <button id="createBtn">Create</button>
    <div id="questionForm" style="display: none;">
      <div id="detailscontainer" style="display: none;">
        <label for="Date">Date Of Exam</label><br>
        <input name="date" id="date" type="date" placeholder="Date of Exam"><br>
        <label for="subject">Subject</label><br>
        <input name="subject" id="subject" type="text" placeholder="Enter Subject"><br>
        <label for="classname">Class Name</label><br>
        <input name="classname" id="classname" type="text" placeholder="Enter Class Name"><br>
        <label for="examType">Exam Type</label><br>
        <input name="examType" id="examType" type="text" placeholder="Enter Exam Type">
        <label for="startTime">Start Time</label><br>
        <input type="time" id="startTime" placeholder="Enter Start Time">
        <label for="endTime">End Time</label><br>
        <input type="time" id="endTime" placeholder="Enter End Time">
        <label for="totalmarks">Total Marks</label>
        <input id="totalmarks" required="true" type="number" placeholder="Enter total marks">
      </div>
      <div id="questionsContainer"></div>
      <div class="btn">
        <button id="addQuestionBtn">Add</button>
        <button id="submitBtn">Submit</button>
      </div>
    </div>
  </div>

  <script>
    let questionCount = -1;
    document.getElementById('createBtn').addEventListener('click', () => {
      document.getElementById('questionForm').style.display = 'block';
      document.getElementById('createBtn').style.display = 'none';
    });

    document.getElementById('addQuestionBtn').addEventListener('click', () => {
      if (questionCount === -1) {
        const details = document.getElementById('detailscontainer');
        details.style.display = 'block';
        questionCount++;
      } else {
        questionCount++;
        createQuestionElement(questionCount);

        if (questionCount > 0) {
          document.getElementById('submitBtn').style.display = 'block';
        }
      }
    });

    function createQuestionElement(questionNumber) {
      const questionsContainer = document.getElementById('questionsContainer');
      const questionDiv = document.createElement('div');
      questionDiv.className = 'question-container';

      const questionNumberLabel = document.createElement('div');
      questionNumberLabel.className = 'question-number';
      questionNumberLabel.textContent = `Question ${questionNumber}`;
      questionDiv.appendChild(questionNumberLabel);

      const questionTypeSelect = document.createElement('select');
      questionTypeSelect.id = `questionType${questionNumber}`;
      questionTypeSelect.classList = 'selectques';
      questionTypeSelect.innerHTML = `
                <option value="text">Text</option>
                <option value="mcq">Multiple Choice</option>
            `;

      const questionTextarea = document.createElement('textarea');
      questionTextarea.id = `questionInput${questionNumber}`;
      questionTextarea.placeholder = 'Enter your question';

      const optionsDiv = document.createElement('div');
      const smalloptn = document.createElement('div');
      optionsDiv.id = `options${questionNumber}`;
      optionsDiv.className = 'options-container';
      optionsDiv.style.display = 'none';

      for (let i = 1; i <= 4; i++) {
        const optionInput = document.createElement('input');
        optionInput.type = 'text';
        optionInput.placeholder = `Option ${i}`;
        optionsDiv.appendChild(optionInput);
      }

      const addOptionButton = document.createElement('button');
      addOptionButton.textContent = '+';
      addOptionButton.classList = 'btnopt';
      addOptionButton.style.display = 'none';
      addOptionButton.addEventListener('click', () => {
        const optionsContainer = document.getElementById(`options${questionNumber}`);
        const numOptions = optionsContainer.children.length;
        if (numOptions < 5) {
          const optionInput = document.createElement('input');
          optionInput.type = 'text';
          optionInput.placeholder = `Option ${numOptions + 1}`;
          optionsContainer.appendChild(optionInput);
        }
        if (numOptions === 1) {
          removeOptionButton.style.display = 'block';
        } else if (numOptions === 4) {
          addOptionButton.style.display = 'none';
        }
      });

      const removeOptionButton = document.createElement('button');
      removeOptionButton.textContent = '-';
      removeOptionButton.classList = 'btnopt';
      removeOptionButton.style.display = 'none';
      removeOptionButton.addEventListener('click', () => {
        const optionsContainer = document.getElementById(`options${questionNumber}`);
        const numOptions = optionsContainer.children.length;
        if (numOptions > 2) {
          optionsContainer.removeChild(optionsContainer.lastChild);
        }
        if (numOptions === 2) {
          removeOptionButton.style.display = 'none';
        } else if (numOptions === 4) {
          addOptionButton.style.display = 'block';
        }
      });

      const removeQuestionButton = document.createElement('button');
      removeQuestionButton.textContent = 'X';
      removeQuestionButton.className = 'remove-question-btn';
      removeQuestionButton.addEventListener('click', () => {
        questionDiv.remove();
        questionCount--;
        if (questionCount === 0) {
          document.getElementById('submitBtn').style.display = 'none';
        }
        updateTotalMarks();
      });

      const marksInput = document.createElement('input');
      marksInput.type = 'number';
      marksInput.className = 'marks-input';
      marksInput.placeholder = 'Enter Marks';
      questionDiv.appendChild(marksInput);

    
      const answerInput = document.createElement('input');
      answerInput.type = 'text';
      answerInput.placeholder = 'Enter Correct Answer';
      questionDiv.appendChild(answerInput);
      questionDiv.appendChild(questionTypeSelect);
      questionDiv.appendChild(questionTextarea);
      questionDiv.appendChild(optionsDiv);
      questionDiv.appendChild(addOptionButton);
      questionDiv.appendChild(removeOptionButton);
      questionDiv.appendChild(removeQuestionButton);

      questionsContainer.appendChild(questionDiv);

      questionTypeSelect.addEventListener('change', () => {
        const selectedQuestionType = questionTypeSelect.value;
        optionsDiv.style.display = selectedQuestionType === 'mcq' ? 'block' : 'none';
        removeQuestionButton.style.height = selectedQuestionType === 'mcq' ? '5%' : '12%';
        addOptionButton.style.display = selectedQuestionType === 'mcq' ? 'block' : 'none';
        removeOptionButton.style.display = selectedQuestionType === 'mcq' ? 'block' : 'none';
      });
    }

    function updateTotalMarks() {
      let totalMarks = 0;

      for (let i = 1; i <= questionCount; i++) {
        const marksInput = document.querySelector(`#options${i} .marks-input`);
        totalMarks += marksInput ? parseFloat(marksInput.value) : 0;
      }

      document.getElementById('totalMarks').textContent = `Total Marks: ${totalMarks}`;
    }

    document.getElementById('submitBtn').addEventListener('click', () => {
      const date = document.getElementById('date').value.trim();
      const subject = document.getElementById('subject').value.trim();
      const classname = document.getElementById('classname').value.trim();
      const startTime = document.getElementById('startTime').value.trim();
      const endTime = document.getElementById('endTime').value.trim();
      const examType = document.getElementById('examType').value.trim();
      const totalmarks=document.getElementById('totalmarks').value.trim();
      const questionsData = [];

      if (date === '' || subject === '' || classname === '' || startTime === '' || endTime === '' || examType === ''||totalmarks==='' ) {
        window.alert('Please fill in all fields.');
        return;
      }

      for (let i = 1; i <= questionCount; i++) {
        const questionType = document.getElementById(`questionType${i}`).value;
        const question = document.getElementById(`questionInput${i}`).value.trim();
        const marks = document.querySelector(`#questionsContainer .question-container:nth-child(${i}) .marks-input`).value.trim();
        const answer = document.querySelector(`#options${i} input[type="text"]`).value.trim();
        let options = [];

        if (questionType === 'mcq') {
          options = Array.from(document.querySelectorAll(`#options${i} input[type="text"]`)).map(input => input.value.trim());
        }

        console.log(`Date: ${date}, Subject: ${subject}, Class Name: ${classname}, StartTime: ${startTime}, EndTime: ${endTime}, ExamType: ${examType}, Question ${i} - Type: ${questionType}, Question: ${question}, Options: ${options}, Marks: ${marks}, Answer: ${answer}`);
        
        questionsData.push({ questionType, question, options, marks, answer });
      }
      const examData = {
        dateOfExam: date,
        subject: subject,
        className: classname,
        startTime: startTime,
        endTime: endTime,
        examType: examType,
        totalmarks:totalmarks,
        questions: questionsData
      };

      console.log(examData);

      const xhr = new XMLHttpRequest();
      xhr.open('POST', '/questions/create/exam');
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.onload = function () {
        if (xhr.status === 201) {
          alert('Exam created successfully');

        } else {
          console.error('Failed to create exam:', xhr.responseText);
          alert('Failed to create exam. Please try again later.');
        }
      };
      xhr.onerror = function () {
        console.error('Error creating exam:', xhr.statusText);
        alert('Failed to create exam. Please try again later.');
      };
      xhr.send(JSON.stringify(examData));

      window.alert('Data saved successfully');
    });
  </script>
  <script>
    document.querySelectorAll('input, textarea, select').forEach(input => {
      input.addEventListener('change', () => {
        input.value = input.value.trim();
      });
    });
  </script>
  <script>
    document.getElementById('date').setAttribute('min', new Date().toISOString().split('T')[0]);
  </script>
</body>

</html>